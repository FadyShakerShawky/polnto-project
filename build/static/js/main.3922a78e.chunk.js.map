{"version":3,"sources":["topbar.js","file.js","componants/TemplatesPanel.js","App.js","componants/Ð¡ustomPhotos.js","index.js"],"names":["observer","store","inputRef","React","useRef","useState","Group","align","Alignment","LEFT","icon","minimal","onClick","ids","pages","map","page","children","child","id","flat","length","window","confirm","pagesIds","p","deletePages","addPage","htmlFor","document","querySelector","click","type","accept","ref","style","width","display","onChange","e","input","target","files","reader","FileReader","onloadend","json","text","result","JSON","parse","alert","loadJSON","onerror","readAsText","toJSON","url","btoa","unescape","encodeURIComponent","stringify","downloadFile","RIGHT","loadJSONFile","file","TemplatesSection","name","Tab","props","Panel","useSWRInfinite","index","data","error","size","mutate","setSize","isLoading","isReachingEnd","total_pages","height","shadowEnabled","images","items","getPreview","item","preview","onSelect","a","fetch","req","loadMore","rowsNumber","sections","setImages","loadImages","Promise","resolve","setTimeout","useEffect","flexDirection","leftIcon","placeholder","marginBottom","image","getImageSize","activePage","addElement","src","DEFAULT_SECTIONS","App","console","log","onDrop","ev","preventDefault","dataTransfer","i","kind","getAsFile","backgroundColor","defaultSection","margin","flex","position","innerWidth","getElementById","setAttribute","createStore","key","localforage","getItem","err","on","setItem","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3922a78e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  Button,\r\n  Navbar,\r\n  Alignment,\r\n  AnchorButton,\r\n  Divider,\r\n  Dialog,\r\n  Classes,\r\n  NavbarHeading,\r\n} from \"@blueprintjs/core\";\r\nimport DownloadButton from \"polotno/toolbar/download-button\";\r\n\r\nimport { downloadFile } from \"polotno/utils/download\";\r\n\r\nexport default observer(({ store }) => {\r\n  const inputRef = React.useRef();\r\n\r\n  const [faqOpened, toggleFaq] = React.useState(false);\r\n\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Group align={Alignment.LEFT}>\r\n        <Button\r\n          icon=\"new-object\"\r\n          minimal\r\n          onClick={() => {\r\n            const ids = store.pages\r\n              .map((page) => page.children.map((child) => child.id))\r\n              .flat();\r\n            const hasObjects = ids?.length;\r\n            if (hasObjects) {\r\n              if (!window.confirm(\"Remove all content for a new design?\")) {\r\n                return;\r\n              }\r\n            }\r\n            const pagesIds = store.pages.map((p) => p.id);\r\n            store.deletePages(pagesIds);\r\n            store.addPage();\r\n          }}\r\n        >\r\n          New\r\n        </Button>\r\n        <label htmlFor=\"load-project\">\r\n          <Button\r\n            icon=\"folder-open\"\r\n            minimal\r\n            onClick={() => {\r\n              document.querySelector(\"#load-project\").click();\r\n            }}\r\n          >\r\n            Open\r\n          </Button>\r\n          <input\r\n            type=\"file\"\r\n            id=\"load-project\"\r\n            accept=\".json,.polotno\"\r\n            ref={inputRef}\r\n            style={{ width: \"180px\", display: \"none\" }}\r\n            onChange={(e) => {\r\n              var input = e.target;\r\n\r\n              if (!input.files.length) {\r\n                return;\r\n              }\r\n\r\n              var reader = new FileReader();\r\n              reader.onloadend = function () {\r\n                var text = reader.result;\r\n                let json;\r\n                try {\r\n                  json = JSON.parse(text);\r\n                } catch (e) {\r\n                  alert(\"Can not load the project.\");\r\n                }\r\n\r\n                if (json) {\r\n                  store.loadJSON(json);\r\n                }\r\n              };\r\n              reader.onerror = function () {\r\n                alert(\"Can not load the project.\");\r\n              };\r\n              reader.readAsText(input.files[0]);\r\n            }}\r\n          />\r\n        </label>\r\n        <Button\r\n          icon=\"floppy-disk\"\r\n          minimal\r\n          onClick={() => {\r\n            const json = store.toJSON();\r\n\r\n            const url =\r\n              \"data:text/json;base64,\" +\r\n              window.btoa(unescape(encodeURIComponent(JSON.stringify(json))));\r\n            downloadFile(url, \"polotno.json\");\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Navbar.Group>\r\n      <Navbar.Group align={Alignment.RIGHT}>\r\n        <Divider />\r\n        <DownloadButton store={store} />\r\n        <NavbarHeading>White board stadio</NavbarHeading>\r\n      </Navbar.Group>\r\n    </Navbar>\r\n  );\r\n});\r\n","export const loadJSONFile = (file, store) => {\r\n  var reader = new FileReader();\r\n  reader.onloadend = function () {\r\n    var text = reader.result;\r\n    let json;\r\n    try {\r\n      json = JSON.parse(text);\r\n    } catch (e) {\r\n      alert('Can not load the project.');\r\n    }\r\n\r\n    if (json) {\r\n      store.loadJSON(json);\r\n    }\r\n  };\r\n  reader.onerror = function () {\r\n    alert('Can not Polotno project file.');\r\n  };\r\n  reader.readAsText(file);\r\n};\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useSWRInfinite } from \"swr\";\r\nimport { ImagesGrid } from \"polotno/side-panel/images-grid\";\r\nimport MdPhotoLibrary from \"@meronex/icons/md/MdPhotoLibrary\";\r\nimport { SectionTab } from \"polotno/side-panel\";\r\n\r\nexport const TemplatesPanel = observer(({ store }) => {\r\n  // load data\r\n  const { data, error, mutate, size, setSize } = useSWRInfinite(\r\n    (index) => `templates/page${index + 1}.json`\r\n  );\r\n\r\n  // do some calculations from the hook above\r\n  const isLoadingInitialData = !data && !error;\r\n  const isLoading =\r\n    isLoadingInitialData ||\r\n    !!(size > 0 && data && typeof data[size - 1] === \"undefined\");\r\n  const isEmpty = data?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (data && data[0].total_pages === size);\r\n\r\n  const loadMore = () => {\r\n    if (!isReachingEnd) {\r\n      setSize(size + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <ImagesGrid\r\n        shadowEnabled={false}\r\n        images={data?.map((data) => data.items).flat()}\r\n        getPreview={(item) => `/templates/${item.preview}`}\r\n        isLoading={isLoading}\r\n        onSelect={async (item) => {\r\n          // download selected json\r\n          const req = await fetch(`/templates/${item.json}`);\r\n          const json = await req.json();\r\n          // just inject it into store\r\n          store.loadJSON(json);\r\n        }}\r\n        loadMore={loadMore}\r\n        rowsNumber={1}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\n// define the new custom section\r\nexport const TemplatesSection = {\r\n  name: \"Custome templetes\",\r\n  Tab: (props) => (\r\n    <SectionTab name=\"Custome templetes\" {...props}>\r\n      <MdPhotoLibrary />\r\n    </SectionTab>\r\n  ),\r\n  // we need observer to update component automatically on any store changes\r\n  Panel: TemplatesPanel,\r\n};\r\n","import React from \"react\";\r\nimport Toolbar from \"polotno/toolbar/toolbar\";\r\nimport ZoomButtons from \"polotno/toolbar/zoom-buttons\";\r\nimport SidePanel from \"polotno/side-panel/side-panel\";\r\nimport Workspace from \"polotno/canvas/workspace\";\r\nimport Topbar from \"./topbar\";\r\nimport { loadJSONFile } from \"./file\";\r\n\r\nimport { DEFAULT_SECTIONS } from \"polotno/side-panel\";\r\nimport { TemplatesSection } from \"./componants/TemplatesPanel\";\r\nimport { Ð¡ustomPhotos } from \"./componants/Ð¡ustomPhotos\";\r\nconst sections = [TemplatesSection, Ð¡ustomPhotos, ...DEFAULT_SECTIONS];\r\n\r\nconst App = ({ store }) => {\r\n  console.log(store);\r\n  return (\r\n    <div\r\n      style={{ width: \"100vw\", height: \"100vh\" }}\r\n      onDrop={(ev) => {\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.preventDefault();\r\n\r\n        if (ev.dataTransfer.items) {\r\n          // Use DataTransferItemList interface to access the file(s)\r\n          for (let i = 0; i < ev.dataTransfer.items.length; i++) {\r\n            // If dropped items aren't files, reject them\r\n            if (ev.dataTransfer.items[i].kind === \"file\") {\r\n              const file = ev.dataTransfer.items[i].getAsFile();\r\n              loadJSONFile(file, store);\r\n            }\r\n          }\r\n        } else {\r\n          // Use DataTransfer interface to access the file(s)\r\n          for (let i = 0; i < ev.dataTransfer.files.length; i++) {\r\n            loadJSONFile(ev.dataTransfer.files[i], store);\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <Topbar store={store} />\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          height: \"calc(100% - 50px)\",\r\n          width: \"100%\",\r\n          backgroundColor: \"#30404d\",\r\n        }}\r\n      >\r\n        <div style={{ width: \"400px\", height: \"100%\", display: \"flex\" }}>\r\n          <SidePanel\r\n            store={store}\r\n            sections={sections}\r\n            defaultSection=\"templates\"\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"100%\",\r\n            margin: \"auto\",\r\n            flex: 1,\r\n            flexDirection: \"column\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <Toolbar store={store} />\r\n          <Workspace store={store} />\r\n          <ZoomButtons store={store} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { InputGroup } from \"@blueprintjs/core\";\r\nimport { getImageSize } from \"polotno/utils/image\";\r\n\r\nimport { SectionTab } from \"polotno/side-panel\";\r\nimport { ImagesGrid } from \"polotno/side-panel/images-grid\";\r\n// import our own icon\r\nimport MdPhotoLibrary from \"@meronex/icons/md/MdPhotoLibrary\";\r\n\r\nexport const PhotosPanel = observer(({ store }) => {\r\n  const [images, setImages] = React.useState([]);\r\n\r\n  async function loadImages() {\r\n    // here we should implement your own API requests\r\n    setImages([]);\r\n    await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n    // for demo images are hard coded\r\n    // in real app here will be something like JSON structure\r\n    setImages([\r\n      { url: \"./images/carlos-lindner-zvZ-HASOA74-unsplash.jpg\" },\r\n      { url: \"./images/guillaume-de-germain-TQWJ4rQnUHQ-unsplash.jpg\" },\r\n    ]);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    loadImages();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <InputGroup\r\n        leftIcon=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={(e) => {\r\n          loadImages();\r\n        }}\r\n        style={{\r\n          marginBottom: \"20px\",\r\n        }}\r\n      />\r\n      <p>Demo images: </p>\r\n      {/* you can create yur own custom component here */}\r\n      {/* but we will use built-in grid component */}\r\n      <ImagesGrid\r\n        images={images}\r\n        getPreview={(image) => image.url}\r\n        onSelect={async (image) => {\r\n          const { width, height } = await getImageSize(image.url);\r\n          store.activePage.addElement({\r\n            type: \"image\",\r\n            src: image.url,\r\n            width,\r\n            height,\r\n          });\r\n        }}\r\n        rowsNumber={2}\r\n        isLoading={!images.length}\r\n        loadMore={false}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\n// define the new custom section\r\nexport const Ð¡ustomPhotos = {\r\n  name: \"custome photos\",\r\n  Tab: (props) => (\r\n    <SectionTab name=\"custome Photos\" {...props}>\r\n      <MdPhotoLibrary />\r\n    </SectionTab>\r\n  ),\r\n  // we need observer to update component automatically on any store changes\r\n  Panel: PhotosPanel,\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport localforage from \"localforage\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { createStore } from \"polotno/model/store\";\r\n\r\nif (window.innerWidth < 650) {\r\n  var mvp = document.getElementById(\"__viewport\");\r\n  mvp.setAttribute(\r\n    \"content\",\r\n    \"width=device-width, height=device-height, initial-scale=0.5\"\r\n  );\r\n  alert(\r\n    \"Hey, looks like you opened the app from the mobile. Polotno Studio is not optimized for mobile yet. But thanks for your interest! We will have mobile support soon. For now, please use it on the desktop.\"\r\n  );\r\n}\r\n\r\nconst store = createStore({ key: \"nFA5H9elEytDyPyvKL7T\" });\r\nwindow.store = store;\r\n\r\nlocalforage.getItem(\"polotno-state\", function (err, json) {\r\n  if (json) {\r\n    store.loadJSON(json);\r\n  }\r\n  if (!store.pages.length) {\r\n    store.addPage();\r\n  }\r\n});\r\n\r\nstore.on(\"change\", () => {\r\n  try {\r\n    const json = store.toJSON();\r\n    localforage.setItem(\"polotno-state\", json);\r\n  } catch (e) {}\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={store} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}